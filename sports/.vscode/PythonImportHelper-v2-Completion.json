[
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "AbstractUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "Group",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "Permission",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "login",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "logout",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "EsportsConfig",
        "kind": 6,
        "importPath": "esports.apps",
        "description": "esports.apps",
        "peekOfCode": "class EsportsConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'esports'",
        "detail": "esports.apps",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "esports.models",
        "description": "esports.models",
        "peekOfCode": "class User(AbstractUser):\n    profile_picture = models.ImageField(upload_to='profile_pictures/',\n                                        blank=True, null=True,\n                                        default='default_profile_picture.jpg')\n    User_Bio = models.TextField(blank=True, null=True)\n    class Meta:\n        # Add this to avoid table name conflicts\n        db_table = 'custom_user'\n    # Add related_name for groups and user_permissions\n    groups = models.ManyToManyField(Group, related_name='esports_users')",
        "detail": "esports.models",
        "documentation": {}
    },
    {
        "label": "Post",
        "kind": 6,
        "importPath": "esports.models",
        "description": "esports.models",
        "peekOfCode": "class Post(models.Model):\n    Title = models.CharField(max_length=200)\n    Author = models.ForeignKey(settings.AUTH_USER_MODEL,\n                               on_delete=models.CASCADE)\n    Content = models.TextField()\n    Created = models.DateTimeField(auto_now_add=True)\n    Updated = models.DateTimeField(auto_now=True)\n    Views = models.IntegerField(default=0)",
        "detail": "esports.models",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "esports.urls",
        "description": "esports.urls",
        "peekOfCode": "urlpatterns = [\n    path('SignIn/', views.SignIn, name='SignIn'),\n    path('SignUp/', views.SignUp, name='SignUp'),\n    path('profile/<int:esport>/', views.profile, name='profile'),\n    path('logout/', views.logout, name='logout'),\n    path('settings/', views.settings, name='settings'),\n    path('', views.List_of_Posts, name='List_of_Posts'),\n    path('post/create/', views.Created_Post, name='Created_Post'),\n    path('post/<int:esport>/delete/', views.Deleted_Post, name='Deleted_Post'),\n    path('post/<int:esport>/update/', views.Updated_Post, name='Updated_Post'),",
        "detail": "esports.urls",
        "documentation": {}
    },
    {
        "label": "SignUp",
        "kind": 2,
        "importPath": "esports.views",
        "description": "esports.views",
        "peekOfCode": "def SignUp(request):\n    \"\"\"\n    User sign up view.\n    \"\"\"\n    if request.method == \"POST\":\n        First_Name = request.POST.get(\"First_Name\")\n        Last_Name = request.POST.get(\"Last_Name\")\n        username = request.POST.get(\"username\")\n        email = request.POST.get(\"email\")\n        phone_number = request.POST.get(\"phone_number\")",
        "detail": "esports.views",
        "documentation": {}
    },
    {
        "label": "validate_email_format",
        "kind": 2,
        "importPath": "esports.views",
        "description": "esports.views",
        "peekOfCode": "def validate_email_format(email):\n    \"\"\"\n    Validate email format.\n    \"\"\"\n    pattern = r'^[a-zA-Z0-9_.+-]+@gmail\\.com$'\n    return bool(re.match(pattern, email))\ndef validate_phone_number(phone_number):\n    \"\"\"\n    Validate phone number format.\n    \"\"\"",
        "detail": "esports.views",
        "documentation": {}
    },
    {
        "label": "validate_phone_number",
        "kind": 2,
        "importPath": "esports.views",
        "description": "esports.views",
        "peekOfCode": "def validate_phone_number(phone_number):\n    \"\"\"\n    Validate phone number format.\n    \"\"\"\n    pattern = r'^\\+[0-9]+$'\n    return bool(re.match(pattern, phone_number))\ndef password_security_checker(password):\n    \"\"\"\n    Check password strength.\n    \"\"\"",
        "detail": "esports.views",
        "documentation": {}
    },
    {
        "label": "password_security_checker",
        "kind": 2,
        "importPath": "esports.views",
        "description": "esports.views",
        "peekOfCode": "def password_security_checker(password):\n    \"\"\"\n    Check password strength.\n    \"\"\"\n    if len(password) < 8:\n        return False\n    if not (re.search(r\"[a-z]\", password) and re.search(r\"[A-Z]\", password)):\n        return False\n    if not re.search(r\"[0-9]\", password):\n        return False",
        "detail": "esports.views",
        "documentation": {}
    },
    {
        "label": "logout_user",
        "kind": 2,
        "importPath": "esports.views",
        "description": "esports.views",
        "peekOfCode": "def LogOutrequest):\n    \"\"\"\n    Logout User.\n    \"\"\"\n    logout(request)\n    return redirect(\"SignIn\")\ndef SignIn(request):\n    \"\"\"\n    User sign in view.\n    \"\"\"",
        "detail": "esports.views",
        "documentation": {}
    },
    {
        "label": "SignIn",
        "kind": 2,
        "importPath": "esports.views",
        "description": "esports.views",
        "peekOfCode": "def SignIn(request):\n    \"\"\"\n    User sign in view.\n    \"\"\"\n    if request.method == \"POST\":\n        username = request.POST.get(\"username\")\n        password = request.POST.get(\"password\")\n        User = authenticate(username=username, password=password)\n        if User is not None:\n            login(request, User)",
        "detail": "esports.views",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": "esports.views",
        "description": "esports.views",
        "peekOfCode": "def profile(request, esport):\n    \"\"\"\n    User profile view.\n    \"\"\"\n    Profile = get_object_or_404(User, esport=esport)\n    return render(request, \"profile.html\", {\"Profile\": Profile})\n@login_required(login_url=\"SignIn\")\ndef settings(request):\n    \"\"\"\n    User settings view.",
        "detail": "esports.views",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 2,
        "importPath": "esports.views",
        "description": "esports.views",
        "peekOfCode": "def settings(request):\n    \"\"\"\n    User settings view.\n    \"\"\"\n    Profile = request.User\n    if request.method == \"POST\":\n        First_Name = request.POST.get(\"First_Name\", \"\")\n        Last_Name = request.POST.get(\"Last_Name\", \"\")\n        bio = request.POST.get(\"bio\", \"\")\n        Profile.First_Name = First_Name",
        "detail": "esports.views",
        "documentation": {}
    },
    {
        "label": "List_of_Posts",
        "kind": 2,
        "importPath": "esports.views",
        "description": "esports.views",
        "peekOfCode": "def List_of_Posts(request):\n    \"\"\"\n    List all posts.\n    \"\"\"\n    posts = Post.objects.all()\n    return render(request, 'List_of_Posts.html', {'posts': posts})\ndef Post_Details(request, esport):\n    \"\"\"\n    View post detail.\n    \"\"\"",
        "detail": "esports.views",
        "documentation": {}
    },
    {
        "label": "Post_Details",
        "kind": 2,
        "importPath": "esports.views",
        "description": "esports.views",
        "peekOfCode": "def Post_Details(request, esport):\n    \"\"\"\n    View post detail.\n    \"\"\"\n    post = get_object_or_404(Post, esport=esport)\n    if request.User.is_authenticated:\n        post.views += 1\n        post.save()\n    return render(request, 'Post_Details.html', {'post': post})\n@login_required(login_url='SignIn')",
        "detail": "esports.views",
        "documentation": {}
    },
    {
        "label": "Created_Post",
        "kind": 2,
        "importPath": "esports.views",
        "description": "esports.views",
        "peekOfCode": "def Created_Post(request):\n    \"\"\"\n    Create a new post.\n    \"\"\"\n    if request.method == 'POST':\n        author = request.User\n        title = request.POST.get('title', '')\n        content = request.POST.get('content', '')\n        if title and content:\n            post = Post.objects.create(author=author, title=title,",
        "detail": "esports.views",
        "documentation": {}
    },
    {
        "label": "Updated_Post",
        "kind": 2,
        "importPath": "esports.views",
        "description": "esports.views",
        "peekOfCode": "def Updated_Post(request, esport):\n    \"\"\"\n    Update a post.\n    \"\"\"\n    post = get_object_or_404(Post, esport=esport)\n    if request.User != post.author:\n        messages.error(request, \"Editing privileges denied: You're not authorized to modify this post.\")\n        return redirect('Post_Details', esport=esport)\n    if request.method == 'POST':\n        title = request.POST.get('title', '')",
        "detail": "esports.views",
        "documentation": {}
    },
    {
        "label": "Deleted_Post",
        "kind": 2,
        "importPath": "esports.views",
        "description": "esports.views",
        "peekOfCode": "def Deleted_Post(request, esport):\n    \"\"\"\n    Delete a post.\n    \"\"\"\n    post = get_object_or_404(Post, esport=esport)\n    if request.User != post.author:\n        messages.error(request, \"Editing privileges denied: You're not authorized to delete this post.\")\n        return redirect('Post_Details', esport=esport)\n    if request.method == 'POST':\n        post.delete()",
        "detail": "esports.views",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "esports.views",
        "description": "esports.views",
        "peekOfCode": "User = get_user_model()\ndef SignUp(request):\n    \"\"\"\n    User sign up view.\n    \"\"\"\n    if request.method == \"POST\":\n        First_Name = request.POST.get(\"First_Name\")\n        Last_Name = request.POST.get(\"Last_Name\")\n        username = request.POST.get(\"username\")\n        email = request.POST.get(\"email\")",
        "detail": "esports.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "sports.asgi",
        "description": "sports.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "sports.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "sports.settings",
        "description": "sports.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-@nbe25o8y_ah@+ma_45&@76j5%#p0iq*z9xj^yhwhdtt1-c%st'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [",
        "detail": "sports.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "sports.settings",
        "description": "sports.settings",
        "peekOfCode": "SECRET_KEY = 'django-insecure-@nbe25o8y_ah@+ma_45&@76j5%#p0iq*z9xj^yhwhdtt1-c%st'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "sports.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "sports.settings",
        "description": "sports.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "sports.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "sports.settings",
        "description": "sports.settings",
        "peekOfCode": "ALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'esports'",
        "detail": "sports.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "sports.settings",
        "description": "sports.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'esports'\n]\nMIDDLEWARE = [",
        "detail": "sports.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "sports.settings",
        "description": "sports.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'sports.urls'",
        "detail": "sports.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "sports.settings",
        "description": "sports.settings",
        "peekOfCode": "ROOT_URLCONF = 'sports.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "sports.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "sports.settings",
        "description": "sports.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "sports.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "sports.settings",
        "description": "sports.settings",
        "peekOfCode": "WSGI_APPLICATION = 'sports.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/5.0/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation",
        "detail": "sports.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "sports.settings",
        "description": "sports.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation\n# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {",
        "detail": "sports.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "sports.settings",
        "description": "sports.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "sports.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "sports.settings",
        "description": "sports.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "sports.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "sports.settings",
        "description": "sports.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "sports.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "sports.settings",
        "description": "sports.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "sports.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "sports.settings",
        "description": "sports.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "sports.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "sports.settings",
        "description": "sports.settings",
        "peekOfCode": "STATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "sports.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "sports.settings",
        "description": "sports.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "sports.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "sports.urls",
        "description": "sports.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('esports.urls'))\n]",
        "detail": "sports.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "sports.wsgi",
        "description": "sports.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "sports.wsgi",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'sports.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    }
]